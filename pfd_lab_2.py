# -*- coding: utf-8 -*-
"""PFD Lab 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DUORsK5PBqwZLVS2NuFomzLyV3AStbJf
"""

import numpy as np
# Define number of elements
NumberOfElements = 50
# Allocate memory
MyArray1 = np.empty(shape=NumberOfElements, dtype=int)

MyArray2 = np.random.randint(-5, 5, 10, dtype=int)

"""1. Initialise one-dimensional array A with 10 random integer numbers from the interval [0..100]
and visualise the elements alongside their indices. Have in mind that NumPy arrays start from
index zero.

"""

import numpy as np
A =np.random.randint(0,100,10)
Size=int(A.shape[0])
for i in range (0,Size):
  print(i,A[i])

"""2. Visualise the sum and the average value of the array"""

#With Numpy funtion
print('Sum:',np.sum(A))
print('aVERAGE:',np.average(A))

#With Numpy funtion
S =int(0)
for i in range(0,Size):
  S=S+A[i]
print('Sum:',S)
print('Average:',S/Size)

"""3. Visualise the minimum and maximum values alongside their indices. This can be achieved
by using the NumPy functions minimum, maximum, argmax and argmin.
"""

#with numpy funtion
print('Maximum vlue:',A.max())
print('Position of maximum value:',np.argmax(A))
print('Minimum value:',A.min())
print('Position of minimum value:',np.argmin(A))

#With out Numpy funtion
Max_v=A[0]
Min_v=A[0]
Max_p=int(0)
Min_p=int(0)

for i in range(1,Size):
  if Max_v<A[i]:
    Max_v=A[i]
    Max_p=i
if Min_v>A[i]:
  Min_v=A[i]
  Min_p=i
print('Maximum value of:',Max_v,'at position:',Max_p)
print('Minimum value of:',Min_v,'at position:',Min_p)

"""4. Initialise arrays B and C with values from array A arranged in ascending and descending
order, respectively. Visualise arrays B and C.
"""

# With NumPy function
# Sort in ascending order
B = np.sort(A)
# Sort in descending order
C = np.sort(A)[::-1]
print(B)
print(C)
# Without NumPy function, performs in-place sort
# Count the number of iterations (for time complexity purposes)
k = int(0)
Temp = int(0)
# Boolean variable Flag controls the sorting algorithm
# Flag with value False means the array is not sorted
# Flag with value True means the array is ready
Flag = False
while Flag == False:
 Flag = True
for i in range(0, Size-1):
# Change the sign '>' to '<' for sorting in descending order
 if A[i] > A[i+1]:
  Flag = False
  Temp = A[i]
A[i] = A[i+1]
A[i+1] = Temp
k = int(k + 1)




print(A)
print('Total number of iterations:', k)

"""6. Visualise arrays A, B and C as a table. Display the indices of the arrays in the first column
of the table.
"""

import pandas as pd

# Define the arrays
A = [1, 2, 3, 4, 5]
B = ['a', 'b', 'c', 'd', 'e']
C = [10, 20, 30, 40, 50]

# Create a DataFrame
df = pd.DataFrame({'Index': range(1, len(A)+1), 'A': A, 'B': B, 'C': C})

# Display the DataFrame
print(df)

"""7. Initialise array D with 10 integer values, such that the first value is 10 and every consecutive
value is equal to the previous value plus 4. Display the array alongside its indices.
"""

#Without numpay funtion
D=np.empty(shape=10,dtype='int')

D[0]=int(10)
for i in range(1,10):
  D[i]=D[i-1]+4
for i in range(0,10):
  print(i,D[i])
  #With Numapy funtion
  D=np.arange(10,50,4)
for i in range(0,10):
  print(i,D[i])